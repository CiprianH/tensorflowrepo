# -*- coding: utf-8 -*-
"""
Created on Wed Feb 19 20:14:57 2020

@author: Ciprian
"""

from __future__ import absolute_import, division, print_function, unicode_literals
from flask import Flask, jsonify, json, request, render_template, abort

import tensorflow as tf
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import os
import pandas as pd

app = Flask(__name__) 

mpl.rcParams['figure.figsize'] = (8, 6)
mpl.rcParams['axes.grid'] = False

df = pd.read_csv("XXBTZEUR.csv")

def univariate_data(dataset, start_index, end_index, history_size, target_size):
  data = []
  labels = []

  start_index = start_index + history_size
  if end_index is None:
    end_index = len(dataset) - target_size

  for i in range(start_index, end_index):
    indices = range(i-history_size, i)
    # Reshape data from (history_size,) to (history_size, 1)
    data.append(np.reshape(dataset[indices], (history_size, 1)))
    labels.append(dataset[i+target_size])
  return np.array(data), np.array(labels)

#TRAIN_SPLIT = 300000
TRAIN_SPLIT = 1400
tf.random.set_seed(13)

#Forecast a univariate time series

uni_data = df['close']
print(uni_data.shape)
uni_data.index = df['date']

uni_data.head()

uni_data = uni_data.values

uni_train_mean = uni_data[:TRAIN_SPLIT].mean()
uni_train_std = uni_data[:TRAIN_SPLIT].std()

print('Mean: ')
print(uni_train_mean)
print('stDev: ')
print(uni_train_std)

uni_data = (uni_data-uni_train_mean)/uni_train_std

univariate_past_history = 20
univariate_future_target = 0

x_train_uni, y_train_uni = univariate_data(uni_data, 0, TRAIN_SPLIT,
                                           univariate_past_history,
                                           univariate_future_target)
x_val_uni, y_val_uni = univariate_data(uni_data, TRAIN_SPLIT, None,
                                       univariate_past_history,
                                       univariate_future_target)

BATCH_SIZE = 256
BUFFER_SIZE = 10000

train_univariate = tf.data.Dataset.from_tensor_slices((x_train_uni, y_train_uni))
train_univariate = train_univariate.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()

val_univariate = tf.data.Dataset.from_tensor_slices((x_val_uni, y_val_uni))
val_univariate = val_univariate.batch(BATCH_SIZE).repeat()

simple_lstm_model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(8, input_shape=x_train_uni.shape[-2:]),
    tf.keras.layers.Dense(1)
])

simple_lstm_model.compile(optimizer='adam', loss='mae')

EVALUATION_INTERVAL = 200
EPOCHS = 10

simple_lstm_model.fit(train_univariate, epochs=EPOCHS,
                      steps_per_epoch=EVALUATION_INTERVAL,
                      validation_data=val_univariate, validation_steps=50)

def uni(input):
    output = (input-uni_train_mean)/uni_train_std
    output = output.astype(np.float32)
    return output

def reverseUni(input):
    output = input * uni_train_std + uni_train_mean
    output = output.astype(np.float32)
    return output

#input numbers need to have .0 if they are whole number
@app.route('/<float:a>,<float:b>,<float:c>,<float:d>,<float:e>,<float:f>,<float:g>,<float:h>,<float:i>,<float:j>,<float:k>,<float:l>,<float:m>,<float:n>,<float:o>,<float:p>,<float:q>,<float:r>,<float:s>,<float:t>', methods = ['GET'])
def get(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t):
    response = {}
    inputToPredict = tf.Variable([[
    	[uni(a)], [uni(b)], [uni(c)], [uni(d)], [uni(e)], [uni(f)], [uni(g)], [uni(h)],
		[uni(i)], [uni(j)], [uni(k)], [uni(l)], [uni(m)], [uni(n)], [uni(o)], [uni(p)],
		[uni(q)], [uni(r)], [uni(s)], [uni(t)]]], shape=(1, 20, 1), name='inputVariable')
    x = simple_lstm_model.predict(inputToPredict)[0]
    response['output'] = reverseUni(x).tolist()
    response['status_code'] = 200
    return jsonify(response)

app.run()
